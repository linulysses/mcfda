// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// RgradQ
Eigen::MatrixXd RgradQ(const Rcpp::List& Lt, const Rcpp::List& Lr, const Eigen::MatrixXd& L, const Rcpp::List& B, const Eigen::MatrixXd& U, const Eigen::MatrixXd& V, const Eigen::MatrixXd& W, const double lam, const Eigen::VectorXd& weight);
RcppExport SEXP _mcfda_RgradQ(SEXP LtSEXP, SEXP LrSEXP, SEXP LSEXP, SEXP BSEXP, SEXP USEXP, SEXP VSEXP, SEXP WSEXP, SEXP lamSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Lt(LtSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Lr(LrSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type U(USEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const double >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(RgradQ(Lt, Lr, L, B, U, V, W, lam, weight));
    return rcpp_result_gen;
END_RCPP
}
// RhessianQ
Rcpp::List RhessianQ(const Rcpp::List& Lt, const Rcpp::List& Lr, const Eigen::MatrixXd& S, const Rcpp::List& B, const Eigen::MatrixXd& U, const Eigen::MatrixXd& V, const Eigen::MatrixXd& W, const double lam, const Eigen::VectorXd& weight, const Eigen::MatrixXd& X);
RcppExport SEXP _mcfda_RhessianQ(SEXP LtSEXP, SEXP LrSEXP, SEXP SSEXP, SEXP BSEXP, SEXP USEXP, SEXP VSEXP, SEXP WSEXP, SEXP lamSEXP, SEXP weightSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Lt(LtSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Lr(LrSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type U(USEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const double >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(RhessianQ(Lt, Lr, S, B, U, V, W, lam, weight, X));
    return rcpp_result_gen;
END_RCPP
}
// crawcov
Rcpp::List crawcov(const Rcpp::List& Lt, const Rcpp::List& Ly, const Eigen::VectorXd weig);
RcppExport SEXP _mcfda_crawcov(SEXP LtSEXP, SEXP LySEXP, SEXP weigSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Lt(LtSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Ly(LySEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type weig(weigSEXP);
    rcpp_result_gen = Rcpp::wrap(crawcov(Lt, Ly, weig));
    return rcpp_result_gen;
END_RCPP
}
// csmoothcov
Eigen::MatrixXd csmoothcov(const Eigen::Map<Eigen::VectorXd>& h, const std::string kernel, const Eigen::Map<Eigen::MatrixXd>& xy, const Eigen::Map<Eigen::MatrixXd>& z, const Eigen::Map<Eigen::VectorXd>& w, Eigen::Map<Eigen::VectorXd>& xgrid, Eigen::Map<Eigen::VectorXd>& ygrid, const double delta);
RcppExport SEXP _mcfda_csmoothcov(SEXP hSEXP, SEXP kernelSEXP, SEXP xySEXP, SEXP zSEXP, SEXP wSEXP, SEXP xgridSEXP, SEXP ygridSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const std::string >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type xy(xySEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type w(wSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd>& >::type xgrid(xgridSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd>& >::type ygrid(ygridSEXP);
    Rcpp::traits::input_parameter< const double >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(csmoothcov(h, kernel, xy, z, w, xgrid, ygrid, delta));
    return rcpp_result_gen;
END_RCPP
}
// csmoothmean
Eigen::MatrixXd csmoothmean(const Eigen::Map<Eigen::VectorXd>& x, const Eigen::Map<Eigen::VectorXd>& z, const Eigen::Map<Eigen::VectorXd>& w, const double h, const std::string kernel, const int d, Eigen::Map<Eigen::VectorXd>& newx);
RcppExport SEXP _mcfda_csmoothmean(SEXP xSEXP, SEXP zSEXP, SEXP wSEXP, SEXP hSEXP, SEXP kernelSEXP, SEXP dSEXP, SEXP newxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const double >::type h(hSEXP);
    Rcpp::traits::input_parameter< const std::string >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< const int >::type d(dSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd>& >::type newx(newxSEXP);
    rcpp_result_gen = Rcpp::wrap(csmoothmean(x, z, w, h, kernel, d, newx));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mcfda_RgradQ", (DL_FUNC) &_mcfda_RgradQ, 9},
    {"_mcfda_RhessianQ", (DL_FUNC) &_mcfda_RhessianQ, 10},
    {"_mcfda_crawcov", (DL_FUNC) &_mcfda_crawcov, 3},
    {"_mcfda_csmoothcov", (DL_FUNC) &_mcfda_csmoothcov, 8},
    {"_mcfda_csmoothmean", (DL_FUNC) &_mcfda_csmoothmean, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_mcfda(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
