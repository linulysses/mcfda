% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cov.R
\name{covfunc}
\alias{covfunc}
\title{Estimate the cov function from functional data/snippets}
\usage{
covfunc(t, y, newt = NULL, mu = NULL, method = c("FOURIER", "PACE"),
  ...)
}
\arguments{
\item{t}{a list of vectors (for irregular design) or a vector (for regular design) containing time points of observations for each individual. Each vector should be in ascending order}

\item{y}{a list of vectors (for irregular design) or a matrix (for regular design) containing the observed values at \code{t}. If it is a matrix, the columns correspond to the time points in the vector \code{t}}

\item{newt}{a list of vectors or a vector containing time points of observations to be evaluated. If NULL, then newt is treated as t}

\item{mu}{the known or estimated mean function object; it must be a scalar (viewed as a constant function), a function handle, or an object obtained by calling \code{meanfunc}}

\item{method}{estimation method, 'PACE' or 'FOURIER'}

\item{...}{other parameters required depending on the \code{method} and \code{tuning}; see details}

\item{tuning}{tuning method to select possible tuning parameters}
}
\value{
an object of the class 'covfunc' containing necessary information to predict/evaluate the estimated covariance function
}
\description{
Estimate the cov function from functional data/snippets
}
\details{
\itemize{
        \item{When \code{method='PACE'}, additional parameters \code{kernel} and \code{deg} are required. \code{bw} as a scalar is optional. When \code{bw} is provided, the bandwidth is set to \code{bw}}
        \item{When \code{method='FOURIER'}, additional parameters \code{q},\code{rho},\code{ext} and \code{domain} are optional. If they are not provided, then they will be deduced from data or selected by the specified \code{tuning} method.}
    }
}
\examples{
mu <- function(s) sin(2*pi*s)
D <- synfd::sparse.fd(mu=mu, X=synfd::gaussian.process(), n=100, m=5)
mu.obj <- meanfunc(D$t,D$y,newt=NULL,method='PACE',
                   tuning='cv',weig=NULL,kernel='gauss',deg=1)
cov.obj <- covfunc(D$t,D$y,newt=NULL,mu=mu.obj,method='FOURIER',
                   tuning='cv',weig=NULL,domain=c(0,1))
cov.hat <- predict(cov.obj,regular.grid())
}
\references{
\insertRef{Lin2020}{mcfda}

\insertRef{Yao2005}{mcfda}
}
